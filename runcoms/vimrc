"
" basic
"
set number
set background=dark
set showmatch
set cursorline

"
" nerd tree
"
set splitright
let nerdtreeshowhidden=1
let nerdtreeignore=['\.pyc$', '\~$', '\.swp$']
let nerdtreeshowlinenumbers=1
autocmd filetype nerdtree setlocal relativenumber

"
" syntax highlighting
"
syntax on

"
" autotrim trailing whitespace
"
autocmd bufwritepre * :%s/\s\+$//e

"
" Plugin Management
"
execute pathogen#infect()

"
" Syntastic settings
"

function! ActivateSyntastic()
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
  let g:syntastic_error_symbol = "✗"
  let g:syntastic_warning_symbol = "⚠️"

  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
endfunction

"
" Specific filetype rules
"
function! SetupForShell()
  set tabstop=2
  set shiftwidth=2
  set expandtab
  set softtabstop=0
  set autoindent
  set smarttab

  call ActivateSyntastic()
  let g:syntastic_python_checkers = ['shellcheck']
  let g:syntastic_sh_shellcheck_args = '-e SC1090'
  setlocal commentstring=#\ %s
endfunction

function! SetupForVim()
  set tabstop=2
  set shiftwidth=2
  set expandtab
  set softtabstop=0
  set autoindent
  set smarttab

  setlocal commentstring=\"\ %s
endfunction

function! SetupForCplusplus()
  set tabstop=4
  set shiftwidth=4
  set expandtab
  set softtabstop=0
  set autoindent
  set smarttab

  call ActivateSyntastic()
  let g:syntastic_cpp_checkers = ['gcc']
  let g:syntastic_cpp_compiler = 'clang++'
  " https://embeddedartistry.com/blog/2017/05/22/werror-is-not-your-friend/
  let g:syntastic_cpp_compiler_options = '-std=c++03 -Wall -Wextra -Wpedantic'

  " vim commentary
  setlocal commentstring=//\ %s

endfunction

function! SetupForPython()
  set tabstop=4
  set shiftwidth=4
  set expandtab
  set softtabstop=0
  set autoindent
  set smarttab

  set fileformat=unix
  let b:comment_leader='#'

  " python autocomplete with virtualenv support
  python3 'python/enable_virtual_env_autocomplete.py'

  call ActivateSyntastic()

  " vim commentary
  setlocal commentstring=#\ %s

  " vim jedi
  let g:jedi#use_tabs_not_buffers = 1
endfunction

filetype plugin indent on
au! Filetype cpp call SetupForCplusplus()
au! Filetype hpp call SetupForCplusplus()
au! Filetype python call SetupForPython()
au! Filetype sh call SetupForShell()
au! Filetype vim call SetupForVim()

"
" Enable hardtime
"
let g:hardtime_default_on = 1
let g:hardtime_showmsg = 1
let g:hardtime_allow_different_key = 1

"
" Airline font
"
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#excludes = ['branches', 'index']
let g:airline#extensions#tabline#buffer_idx_mode = 1

"
" Use system clipboard rather than buffer clipboard
"
set clipboard^=unnamed,unnamedplus

"
" Change zt/zb behavior
"
set scrolloff=2

"
" Aliases
"
function! SetupCommandAlias(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction
call SetupCommandAlias("W","w")
call SetupCommandAlias("nt","NERDTree")
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

"
" Colorscheme
"
colorscheme gruvbox
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
highlight ExtraWhiteSpace ctermbg=red guibg=red

" keep this to avoid garbage in vim's command bar
autocmd! VimEnter * redraw

"
" Spell Check
"
autocmd FileType markdown setlocal spell
autocmd FileType gitcommit setlocal spell

highlight clear SpellBad
highlight SpellBad cterm=underline
